children=5
mpath="/usr/local/lib/opensips/modules/"

loadmodule "proto_udp.so"
## dialog is now required by the rtpproxy, not sure why, but OK
loadmodule "dialog.so"

loadmodule "sipmsgops.so"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "rtpproxy.so"
loadmodule "textops.so"
loadmodule "uri.so"
loadmodule "usrloc.so"
loadmodule "signaling.so"
loadmodule "registrar.so"

modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:5500")
modparam("rtpproxy", "rtpproxy_autobridge", 1)

modparam("registrar", "min_expires", 10)
modparam("registrar", "max_expires", 60)

listen=udp:*:5060

route {
    xlog("OpenSIPS received a request $rm from $si\n");
    ## initial sanity checks -- messages with
    ## max_forwards==0, or excessively long requests
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    };

    ## shield us against retransmits
    if (!t_newtran()) {
        sl_reply_error();
        exit;
    };

    if (is_method("REGISTER")) {
        route(1);
        exit;
    };
    if (is_method("INVITE")) {
        t_reply("100", "Trying");
        if (rtpproxy_offer("r")) {
            t_on_reply("1");
            if (!has_totag()) {

                t_on_failure("1");
            }
        };
    };

    if (is_method("BYE")) {
        rtpproxy_unforce();
    };

    record_route();

    if (loose_route()) {
        t_relay();
        exit;
    };

    if (!has_totag()) {
        if ((!lookup("location") && is_method("INVITE") && is_myself("$rd")) || is_myself("$rd")) {
            t_reply("404", "Not Found");
            exit;
        };
    };
    t_relay();
    ##rtpproxy_stream2uac("ringback", "10");
    exit;
}

onreply_route[1]
{
    xlog("OpenSIPS received a reply $rs/$rm from $si\n");
    if ($rs =~ "(183)|2[0-9][0-9]") {
        xlog("  calling search()\n");
        if(!search("^Content-Length:[ ]*0")) {
            xlog("    calling rtpproxy_answer()\n");
            rtpproxy_answer("r");
            ##rtpproxy_stream2uas("ringback", "10");
        };
    };
}

failure_route[1]
{

    rtpproxy_unforce();
}

# Registration requests - check authencity and save into database
route[1] {
    xlog("L_INFO", "processing $rm received from $si\n");
    xlog("saving contact $ct into the location database\n");
    save("location");
    if ($Ri == 10.10.0.10) {
        xlog("forwarding REGISTER to 10.0.0.13 registrar ($$ci=$ci)\n");
        t_replicate("sip:10.0.0.13:5060");
    } else {
        xlog("forwarding REGISTER to 10.0.0.10 registrar ($$ci=$ci)\n");
        t_replicate("sip:10.0.0.10:5060");
    }
    exit;
}
